package e_aloha.week9

/**
 * https://www.acmicpc.net/problem/12865
 * 평범한 배낭
 */
fun main() {
    val (n, k) = readLine()!!.split(" ").map { it.toInt() }

    //List<Pair<N,K>>
    val items = List(n) { readLine()!!.split(" ").map { it.toInt() }.let { it[0] to it[1] } }

    val dp = Array(n + 1) { IntArray(k + 1) }

    for (i in 1..n) {
        // item get
        val (w, v) = items[i - 1]

        // 용량 체크
        for (j in 0..k) {
            if (j < w) {
                // 물건을 넣을 수 없는 경우
                dp[i][j] = dp[i - 1][j]
            } else {
                // 물건을 넣지 않는 경우 vs 넣는 경우
                dp[i][j] = maxOf(dp[i - 1][j], dp[i - 1][j - w] + v)
            }
        }
    }

    println(dp[n][k])

}
/**
 * 물건 개수: 4, 배낭 최대 용량: 7
 * 물건 리스트: [(6, 13), (4, 8), (3, 6), (5, 12)]
 *
 * 무게: 6, 가치: 13
 * [[ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0 13 13]
 *  [ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0  0  0]]
 * >> 무게 6 이상일 때만 13이 들어감.
 *
 * 무게: 4, 가치: 8
 *[[ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0 13 13]
 *  [ 0  0  0  0  8  8 13 13]
 *  [ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0  0  0]]
 * >> 무게 4 이상부터 8이 들어감.
 * >> 무게 6~7은 기존 13이 유지됨.
 *
 * 무게: 3, 가치: 6
 *[[ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0 13 13]
 *  [ 0  0  0  0  8  8 13 13]
 *  [ 0  0  0  6  8  8 13 14]
 *  [ 0  0  0  0  0  0  0  0]]
 * >> 무게 3부터 6이 들어감.
 * >> 무게 7에서는 8+6=14로 갱신됨
 *
 * 무게: 5, 가치: 12
 * [[ 0  0  0  0  0  0  0  0]
 *  [ 0  0  0  0  0  0 13 13]
 *  [ 0  0  0  0  8  8 13 13]
 *  [ 0  0  0  6  8  8 13 14]
 *  [ 0  0  0  6  8 12 13 14]]
 * >> 무게 5에서 12가 들어가면서 가치 증가
 * >> 	최종적으로 배낭 최대 가치는 14.
 */
